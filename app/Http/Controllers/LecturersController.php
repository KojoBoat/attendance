<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use QrCode;
use App\Course;
use App\Lecturer;
use App\Student;
use App\Qr_code;
class LecturersController extends Controller

{

	public function __construct(){

	}

    public function dashboard(){
    	return view('dashboard');
    }


    public function login_page(){

    	return view('login');
    }

    public function logout (){
        Auth::logout();
        return redirect("/");
    }





       // Login Script
       public function login(Request $r){
	  	 $messages =['email.required'=> 'Email is required',
	              'password.required' =>'Password is required']; //error messages to be displayed

        	$this->validate($r,
      		[
      		  'email' => 'required|email',
      		  'password' => 'required|alpha_num|max:10',
      		], $messages);

    		  $credentials = $r->only('email','password');
    	    if(Auth::attempt($credentials)){

          // Authentication passed, lecturer is now logged in
	      	return redirect()->intended('dashboard');
	      } else {
	      	return back()->with('error','Incorrect email or password');
	    }

    }


  				// $user = User::where('email', $r->email)->first();
  				// if(!$lecturer)
  				// 	return back()->with('Failed', 'Incorrect email or password');
  				// if(Hash::check($r->password, $lecturer->password)) {
  				// 	Auth::login($lecturer);
  				// 	return redirect()->intended('dashboard');
  				// }
  				// else
  				// 	return back()->with('Failed', 'Incorrect email or password');

        public function addCourses(Request $r){
        $user = Auth()->user()->id;
        $lecturer = Lecturer::where('user_id',$user)->get('id');
        $lecturer_id = $lecturer[0]['id'];
      	$messages =['course_code.required'=> 'Course Code is required and should be in alpha numeric',
              		'course_name.required' =>'Course Name is required']; //error messages to be displayed

                   $this->validate($r,
       		           [
                     'course_code' => 'required',
                      'course_name' => 'required',
       		           ], $messages);

	     // inserting the course details into the courses table
           	for($i=0; $i<count($r->course_code); $i++) {
           		Course::create([
           			'lecturer_id' => $lecturer_id,
           			'course_code' => $r->course_code[$i],
           			'course_name' => $r->course_name[$i]
           		]);
       	}


        // $course = Course::create([
       	// 	'user_id' => Auth::id(),
       	// 	'course_code' => json_encode($r['course_code']),
       	// 	'course_name' => json_encode($r['course_name']),

       	// ]);

        return back()->with('message', 'Course Added Successfuly');
    }

        public function showCourses(Request $r){
       		$lecturer = Auth::user()->lecturer;
          $courses = $lecturer->courses()->orderBy('created_at', 'desc')->get();
    	  	return view('added_courses',compact("courses"));
       	}

    //    deleting a course
        public function destroy($id){
               $course = Course::where('id',$id)->first();
               $course->delete();
               return back()->with('success', "Course deleted Successfuly");
       }

    // show the details of the number of students registered
       public function showStudent(){
           $students = Student::with('user')->get();
           return view('students',compact("students"));
         }

      public function showcodeform(){
        $courses = Auth::user()->lecturer->courses()->orderBy('created_at', 'desc')->get();
        return view('qrcodes.list', compact('courses'));
    }


    public function generateCode(Request $r){

        // return $r->all();

        $this->validate($r, [
            'time' => 'required|date_format:H:i',
            'course_code' => 'required|exists:qr_codes,id'
        ]);



        $lecturer = Auth::user()->lecturer;

        $name = uniqid().".png";

        $id = Qr_code::all()->last()->id;

        QrCode::format('png')->size(400)->generate((string)++$id, '../public/images/codes/'.$name);

        Qr_code::create([
        'lecturer_id' => $lecturer->id,
        'image'       => $name,
        'course_id'   => $r['course_code'],
        'time' =>  $r['time']
        ]);


       return redirect('dashboard/qr-code');
    }

    /**
     * List all qr codes generated by user
     *
     * @return Object
     */
    public function listQrCodes() {

        $qr_codes = auth()->user()->lecturer->qr_codes()->orderBy('created_at', 'desc')->get();
        return view('qrcodes.generated',compact('qr_codes'));
    }

    /**
     *show generated qr code
     *
     */
    public function showGeneratedCode() {

        $code = auth()->user()->lecturer->qr_codes()->get()->last();

        return view('qrcodes.show', compact('code'));
    }


    public function showStudents($id) {

        $code = Qr_code::find($id);

        if(!$code) {
            return back()->with('error', 'qr code not found');
        }

        $records = $code->records()->present()->get();

        return view('qrcodes.students', compact('records', 'code'));


    }




}

